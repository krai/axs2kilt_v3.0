{
    "_parent_entries": [ [ "^", "byname", "shell" ], [ "^", "byname", "base_loadgen_program" ], ["^", "byname", "base_bert_kilt_loadgen_program"] ],
    "_producer_rules": [
            [ [ "bert_squad", "qaic", "framework=kilt" ], [["run"]], { "return_saved_record_entry": true }, ["shell_cmd_with_subs"] ]
    ],

    "squad_dataset_query":[ "downloaded", "squad_original" ],
    "squad_dataset_entry": [ "^", "byquery", [[ "^^", "get", "squad_dataset_query" ]], {}, ["squad_dataset_query"] ],
    "squad_dataset_original_path": [ "^^", "execute", [[
        [ "get", "squad_dataset_entry" ],
        [ "get_path" ]
    ]] ],

    "dataset_max_seq_length": "384",
    "tokenized_squad_query":[ "tokenized", "squad_v1_1", "calibration=no" , [ "^^", "substitute", "dataset_max_seq_length=#{dataset_max_seq_length}#" ] ],
    "tokenized_squad_entry": [ "^", "byquery", [[ "^^", "get", "tokenized_squad_query" ]], {}, ["tokenized_squad_query"] ],
    "tokenized_squad_path": [ "^^", "execute", [[
        [ "get", "tokenized_squad_entry" ],
        [ "get_path" ]
    ]] ],
    "tokenized_squad_dirname": [ "^^", "func", ["os.path.dirname", ["^^", "get", "tokenized_squad_path"]] ] ,
    "tokenized_squad_files_prefix": [ "^^", "substitute", "#{tokenized_squad_entry.files_prefix}#" ],

    "mlperf_inference_git_query": [ "^", "byquery", "git_repo,repo_name=mlperf_inference_git" ],
    "mlperf_inference_git_path": [ "^^", "execute", [[
        [ "get", "mlperf_inference_git_query" ],
        [ "get_path" ]
    ]] ],
    "loadgen_mlperf_conf_path": [ "^^", "substitute", "#{mlperf_inference_git_path}#/mlperf.conf"],
    "protobuf_path": [ "^", "execute", [[
        [ "byquery", "compiled,protobuf" ],
        [ "get_path" ]
    ]] ],

    "model_name": "bert_99",
    "compiled_model_source_query": [ "^^", "substitute", [["kilt_ready", "qaic_model", "model_name=#{model_name}#", "scenario=#{loadgen_scenario}#", "sut_name=#{sut_name}#"]] ],
    "compiled_model_source_entry": [ "^", "byquery", [[ "^^", "get", "compiled_model_source_query" ]], {}, ["compiled_model_source_query"] ],
    "compiled_model_source": [ "^^", "execute", [[
        [ "get", "compiled_model_source_entry" ],
        [ "get_path", "elfs" ]
    ]] ],

    "sut_param_query": [ "param", "sut_specific", "benchmark=bert" ],
    "sut_param_entry": [ "^", "byquery", [[ "^^", "get", "sut_param_query" ]], {}, ["sut_param_query"] ],

    "recommended_activation_count": [ "^^", "dig", [ "^^", "substitute", "sut_param_entry.#{model_name}#.#{sut_name}#.recommended_activation_count.#{loadgen_scenario}#"]],
    "device_ids": [ "^^", "dig", [ "^^", "substitute", "sut_param_entry.#{model_name}#.#{sut_name}#.device_ids"]],
    "recommended_max_wait_abs": [ "^^", "dig", [ "^^", "substitute", "sut_param_entry.#{model_name}#.#{sut_name}#.recommended_max_wait_abs.#{loadgen_scenario}#"]],

    "loadgen_buffer_size_str": [ "^^", "execute", [[
        [ "get", "loadgen_buffer_size" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_dataset_size_str": [ "^^", "execute", [[
        [ "get", "loadgen_dataset_size" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_target_qps_str": [ "^^", "execute", [[
        [ "get", "loadgen_target_qps" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_target_latency_str": [ "^^", "execute", [[
        [ "get", "loadgen_target_latency" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_count_override_max_str": [ "^^", "execute", [[
        [ "get", "loadgen_count_override_max" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_count_override_min_str": [ "^^", "execute", [[
        [ "get", "loadgen_count_override_min" ],
        0,
        [ "func", "str" ]
    ]] ],

    "loadgen_count_override_str": [ "^^", "execute", [[
        [ "get", "loadgen_count_override" ],
        0,
        [ "func", "str" ]
    ]] ],

    "env": {
        "LD_LIBRARY_PATH": [ "^^", "substitute", "/opt/qti-aic/dev/lib/x86_64:#{protobuf_path}#/install/lib/"],
        "CK_LOADGEN_TRIGGER_COLD_RUN": "NO",
        "CK_VERBOSE": "1",
        "CK_ENV_MLPERF_INFERENCE_MLPERF_CONF": [ "^^", "substitute", "#{loadgen_mlperf_conf_path}#"],
        "CK_LOADGEN_USER_CONF": [ "^^", "substitute", "#{loadgen_user_conf_path}#"],
        "ML_MODEL_MODEL_NAME": "bert",
        "CK_LOADGEN_SCENARIO": [ "^^", "substitute", "#{loadgen_scenario}#"],
        "CK_LOADGEN_MODE": [ "^^", "substitute", "#{loadgen_mode}#"],
        "CK_ENV_QAIC_MODEL_BATCH_SIZE": [ "^^", "substitute", "#{recommended_batch_size}#"],
        "CK_ENV_QAIC_DEVICE_IDS": [ "^^", "substitute", "#{device_ids}#"],
        "CK_ENV_QAIC_MODEL_ROOT": [ "^^", "substitute", "#{compiled_model_source}#"],
        "CK_ENV_QAIC_ACTIVATION_COUNT": [ "^^", "substitute", "#{recommended_activation_count}#"],
        "CK_ENV_QAIC_QUEUE_LENGTH": [ "^^", "substitute", "#{recommended_queue_length}#"],
        "CK_ENV_QAIC_THREADS_PER_QUEUE": [ "^^", "substitute", "#{recommended_threads_per_queue}#"],
        "CK_ENV_QAIC_INPUT_COUNT": "4",
        "CK_ENV_QAIC_OUTPUT_COUNT": "2",
        "CK_ENV_QAIC_INPUT_SELECT": [ "^^", "substitute", "#{recommended_input_select}#"],
        "CK_ENV_QAIC_MAX_WAIT_ABS": [ "^^", "substitute", "#{recommended_max_wait_abs}#"],
        "ML_MODEL_SEQ_LENGTH": [ "^^", "substitute", "#{dataset_max_seq_length}#"],
        "CK_ENV_DATASET_SQUAD_TOKENIZED_ROOT": [ "^^", "substitute", "#{tokenized_squad_dirname}#"],
        "CK_ENV_DATASET_SQUAD_TOKENIZED_INPUT_IDS": [ "^^", "substitute", "#{tokenized_squad_files_prefix}#_input_ids.raw"],
        "CK_ENV_DATASET_SQUAD_TOKENIZED_INPUT_MASK": [ "^^", "substitute", "#{tokenized_squad_files_prefix}#_input_mask.raw"],
        "CK_ENV_DATASET_SQUAD_TOKENIZED_SEGMENT_IDS": [ "^^", "substitute", "#{tokenized_squad_files_prefix}#_segment_ids.raw"],
        "CK_ENV_DATASET_SQUAD_TOKENIZED_MAX_SEQ_LENGTH": [ "^^", "substitute", "#{dataset_max_seq_length}#"],
        "CK_LOADGEN_BUFFER_SIZE": [ "^^", "substitute", "#{loadgen_buffer_size_str}#"],
        "CK_LOADGEN_DATASET_SIZE": [ "^^", "substitute", "#{loadgen_dataset_size_str}#"],
        "CK_LOADGEN_TARGET_QPS": [ "^^", "substitute", "#{loadgen_target_qps_str}#"],
        "CK_LOADGEN_TARGET_LATENCY": [ "^^", "substitute", "#{loadgen_target_latency_str}#"],
        "CK_LOADGEN_MAX_QUERY_COUNT": [ "^^", "substitute", "#{loadgen_count_override_max_str}#"],
        "CK_LOADGEN_MIN_QUERY_COUNT": [ "^^", "substitute", "#{loadgen_count_override_min_str}#"],
        "CK_LOADGEN_COUNT_OVERRIDE": [ "^^", "substitute", "#{loadgen_count_override_str}#"]
    },

    "output_entry": [ "^^", "execute", [[
        [ "get", "__record_entry__" ],
        [ "attach", [ "^", "work_collection" ] ],
        [ "plant", [ "^^", "substitute", [[
            "_parent_entries", [ "AS^IS", "AS^IS", ["^", "byname", "base_bert_loadgen_experiment"] ],
            "model_name", "#{model_name}#",
            "framework", "kilt",
            "sut_name", "#{sut_name}#",
            "dataset_name", "squad_v1_1",
            "squad_dataset_original_path", "#{squad_dataset_original_path}#",
            "tokenized_squad_path", "#{tokenized_squad_path}#",
            "program_name", "bert_squad_qaic_loadgen_kilt",
            "loadgen_scenario", "#{loadgen_scenario}#",
            "loadgen_mode", "#{loadgen_mode}#",
            "loadgen_dataset_size", "#{loadgen_dataset_size}#",
            "loadgen_buffer_size", "#{loadgen_buffer_size}#",
            "loadgen_count_override", "#{loadgen_count_override}#",
            "loadgen_multistreamness", "#{loadgen_multistreamness}#",
            "loadgen_mlperf_conf_path", "#{loadgen_mlperf_conf_path}#",
            "loadgen_target_qps", "#{loadgen_target_qps}#",
            "loadgen_target_latency", "#{loadgen_target_latency}#",
            "loadgen_count_override_max", "#{loadgen_count_override_max}#",
            "loadgen_count_override_min", "#{loadgen_count_override_min}#",

            "tags", [ "loadgen_output", "bert_squad", "qaic", "kilt"]
        ]] ] ],
        [ "save" ]
    ]] ],

    "bert_binary_path":[ "^", "execute", [[
        [ "byquery", "compiled,kilt_executable,bert" ],
        [ "get_path" ]
    ]] ],

    "in_dir": [ "^^", "execute", [[
        [ "get", "output_entry" ],
        [ "get_path" ]
    ]] ],

    "shell_cmd_with_subs": [ "^^", "substitute", "#{bert_binary_path}#"]
}
